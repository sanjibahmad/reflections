What happens when you initialize a repository? Why do you need to do it?

     An empty Git repository is created.
     Needs to be done to initialize the repository before any commits
     can be made.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     There might be files in my working directory that I don't want added
     to the Git repository. Backup files for example.
     Also there might be files I am working on and I am not yet ready to
     commit the files. Or they should be logically separated in 2 commits.
     So I will keep them in my working directory and avoid adding them
     to my staging area until I am ready to commit.

How can you use the staging area to make sure you have one commit per logical
change?

     Do a git diff to see changes in staging and working directory
     Then git add to add the file that will be committed
     Then git diff --stage to ensure only the file added will be committed
     Now git commit

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

     When experimental code needs to be run.
     Or a different program objective needs to be tested.
     Or when changes are so drastic that it might affect the stability
     of the program.

How do the diagrams help you visualize the branch structure?

    Helps indentify the commits where the branches took off
    and at what point in the commits they branched.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    So that all the commits within each branch can be preserved
    and merged into one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

    Merging manually allows the user to manage conflicts.
